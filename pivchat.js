// Generated by CoffeeScript 1.4.0
(function() {
  var async, callHipchat, callPivotal, config, ensureRooms, getRoomsForStories, getTargetStories, hipchat, labels, par, pivotal, projectId, request, states, util, xml2js, _,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  async = require("async");

  config = require("./config");

  _ = require('underscore')._;

  request = require("request");

  par = require("par");

  xml2js = require('xml2js');

  util = require('util');

  pivotal = {
    call: function() {
      var args, baseUrl, method, token;
      baseUrl = arguments[0], token = arguments[1], method = arguments[2], args = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
      return pivotal[method].apply(pivotal, [baseUrl, token].concat(__slice.call(args)));
    },
    get: function(baseUrl, token, path, qs, cb) {
      return request.get("" + baseUrl + path, {
        qs: qs,
        headers: {
          "X-TrackerToken": token
        }
      }, function(err, response, body) {
        return cb(err, body);
      });
    },
    filter: function(props) {
      var k, quote, toArray, v;
      quote = function(value) {
        var shouldQuote;
        shouldQuote = _.any([" ", "-", "_"], function(char) {
          return value.indexOf(char) !== -1;
        });
        if (shouldQuote) {
          return "\"" + value + "\"";
        } else {
          return value;
        }
      };
      toArray = function(v) {
        if (_.isArray(v)) {
          return v;
        } else {
          return [v];
        }
      };
      return ((function() {
        var _results;
        _results = [];
        for (k in props) {
          v = props[k];
          _results.push(k + ":" + (_.map(toArray(v), quote)).join(","));
        }
        return _results;
      })()).join(" ");
    }
  };

  hipchat = {
    call: function() {
      var args, baseUrl, method, token;
      baseUrl = arguments[0], token = arguments[1], method = arguments[2], args = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
      return hipchat[method].apply(hipchat, [baseUrl, token].concat(__slice.call(args)));
    },
    get: function(baseUrl, token, path, qs, cb) {
      qs = _.defaults({
        auth_token: token
      }, qs);
      return request.get("" + baseUrl + path, {
        qs: qs
      }, function(err, response, body) {
        return cb(err, body);
      });
    },
    post: function(baseUrl, token, path, qs, cb) {}
  };

  getRoomsForStories = function(stories) {
    console.log("Stories to base rooms on", stories);
    return [
      {
        name: "(P) storyname (storyId)",
        topic: "adsfasdf (label, label)"
      }
    ];
  };

  ensureRooms = function(callHipchat, desiredRooms, match) {
    var existingRooms;
    existingRooms = [];
    return desiredRooms = [];
  };

  getTargetStories = function(callPivotal, projectId, labels, states, cb) {
    var fixedStory, label, requests;
    fixedStory = function(story) {
      var listFields;
      listFields = ['labels', 'notes', 'tasks'];
      return _.object(_.map(story, function(value, key) {
        return [key, __indexOf.call(listFields, key) >= 0 ? value : value != null ? value[0] : void 0];
      }));
    };
    requests = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = labels.length; _i < _len; _i++) {
        label = labels[_i];
        _results.push(par(callPivotal, "get", "/projects/" + projectId + "/stories", {
          filter: pivotal.filter({
            label: label,
            state: states
          })
        }));
      }
      return _results;
    })();
    return async.parallel(requests, function(err, xmls) {
      var parser, x;
      if (err) {
        throw "Pivotal request failure";
      }
      parser = new xml2js.Parser({
        ignoreAttrs: true
      });
      return async.parallel((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = xmls.length; _i < _len; _i++) {
          x = xmls[_i];
          _results.push(par(parser.parseString, x));
        }
        return _results;
      })(), function(err, results) {
        var r, stories;
        if (err) {
          throw "error parsing Pivotal XML";
        }
        stories = _.union.apply(_, (function() {
          var _i, _len, _ref, _results;
          _results = [];
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            r = results[_i];
            if ((_ref = r.stories) != null ? _ref.story : void 0) {
              _results.push(r.stories.story);
            }
          }
          return _results;
        })());
        return cb(_.map(stories, fixedStory));
      });
    });
  };

  callPivotal = par(pivotal.call, config.pivotal.baseUrl, config.pivotal.token);

  callHipchat = par(hipchat.call, config.hipchat.baseUrl, config.hipchat.token);

  projectId = config.projectId, labels = config.labels, states = config.states;

  getTargetStories(callPivotal, projectId, labels, states, function(stories) {
    return console.log("Stories!", stories);
  });

}).call(this);
