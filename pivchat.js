// Generated by CoffeeScript 1.4.0
(function() {
  var Bacon, callHipchat, callPivotal, config, createRoomForStory, getRoomName, getRoomTopic, getTargetStories, hipchat, labels, notifyOfNewRoom, par, pivotal, projectId, rooms, states, stories, xml2js, _, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Bacon = require('baconjs').Bacon;

  par = require("par");

  xml2js = require('xml2js');

  _ = require('underscore')._;

  hipchat = require('./hipchat');

  pivotal = require('./pivotal');

  config = require("./config");

  getTargetStories = function(callPivotal, projectId, labels, states) {
    var fixedStory, label, parse, r, requests;
    parse = new xml2js.Parser({
      ignoreAttrs: true
    }).parseString;
    fixedStory = function(story) {
      var listFields;
      listFields = ['labels', 'notes', 'tasks'];
      return _.object(_.map(story, function(value, key) {
        return [key, __indexOf.call(listFields, key) >= 0 ? value : value != null ? value[0] : void 0];
      }));
    };
    requests = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = labels.length; _i < _len; _i++) {
        label = labels[_i];
        _results.push(par(callPivotal, "get", "/projects/" + projectId + "/stories", {
          filter: pivotal.filter({
            label: label,
            state: states
          })
        }));
      }
      return _results;
    })();
    return Bacon.mergeAll((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = requests.length; _i < _len; _i++) {
        r = requests[_i];
        _results.push(Bacon.fromNodeCallback(r));
      }
      return _results;
    })()).flatMap(par(Bacon.fromNodeCallback, parse)).map(function(result) {
      var _ref;
      return _.map(result != null ? (_ref = result.stories) != null ? _ref.story : void 0 : void 0, fixedStory);
    }).scan([], '.concat').skip(labels.length);
  };

  getRoomName = function(story) {
    return "(P) " + (story.name.substr(0, 35)) + " (" + story.id + ")";
  };

  getRoomTopic = function(story) {
    return "" + story.name + " (" + (story.labels.join(', ')) + ")";
  };

  createRoomForStory = function(callHipchat, story) {
    var room;
    room = {
      name: getRoomName(story),
      topic: getRoomTopic(story),
      owner_user_id: config.hipchat.ownerUserId
    };
    return callHipchat("post", "/rooms/create", room);
  };

  notifyOfNewRoom = function(callHipchat, roomId, story) {
    return callHipchat("post", "/rooms/message", {
      from: "God",
      room_id: roomId,
      message_format: "text",
      message: "@all Hit 'lobby' and join the discussion for '" + story.name + "'",
      color: "purple"
    });
  };

  callPivotal = par(pivotal.call, config.pivotal.baseUrl, config.pivotal.token);

  callHipchat = par(hipchat.call, config.hipchat.baseUrl, config.hipchat.token);

  _ref = config.pivotal, labels = _ref.labels, projectId = _ref.projectId, states = _ref.states;

  stories = getTargetStories(callPivotal, projectId, labels, states);

  rooms = Bacon.fromNodeCallback(callHipchat, "get", "/rooms/list", {}).map('.rooms');

  Bacon.zipAsArray([stories, rooms]).onValues(function(_stories, _rooms) {
    var storiesWithoutRooms;
    storiesWithoutRooms = _.filter(_stories, function(_arg) {
      var id;
      id = _arg.id;
      return _.pluck(_rooms, 'name').join().indexOf(id) === -1;
    });
    _.each(storiesWithoutRooms, par(createRoomForStory, callHipchat));
    return _.each(storiesWithoutRooms, par(notifyOfNewRoom, callHipchat, config.hipchat.notificationRoomId));
  });

}).call(this);
